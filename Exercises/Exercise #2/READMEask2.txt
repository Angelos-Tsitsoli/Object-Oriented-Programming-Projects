Eντολές για μεταγλώτισση : g++ -o ask2 ask2.cpp ask2main.cpp και ./ask2 με αριθμούς πχ 1 1 4 4 στην γραμμή εντολών πχ ./ask1 1 1 4 4

Περιγραφή αρχείου ask2.h:
class cashier:
Η κλάση του ταμέιου περιέχει στο private κομμάτι μια μεταβλητή open_flag με ένδειξη 1 αν είναι ανοιχτό και 0 αν είναι κλειστό το ταμείο.
Επίσης διαθέτει μια ένδειξη που λέγεται serving_flag και δείχνει αν εξυπηρετεί έναν πελάτη με τιμές 1 αν εξυπηρετεί και 0 αν δεν εξυπηρετεί.
Τέλος στο private κομμάτι έχει έναν μετρητή για το πόσοι πελάτες εξυπηρετόυνται χωρίς διακοπή.
Οι μεταβλητές αυτές βρίσκονται στο private κομμάτι διότι δεν θα πρέπει να έχουν πρόσβαση σαυτές άλλες κλάσεις ή συναρτήσεις πάρα της κλάσης στην οποία ορίζονται.
Στο public κομμάτι έχουμε την destructor του ταμείου, και την constructor που όπως αναφέρεται στην εκφώνηση η constructor όταν δημιουργείται το ταμείο αρχικοποιεί με μηδέν τη μεταβλητη open_cashier και τη serving_flag διότι είναι κλειστό και δεν εξυπηρετεί κάποιον το ταμείο.
Στην συνέχεια όσον αφορά την συμπεριφορά του ταμείου έχω φτιάξει μια μικρή συνάρτηση για κάθε λειτουργεία του ταμείου 

open:
Η συνάρτηση open του ταμείου ανοίγει το ταμείο θέτωντας την τιμή του open_flag ίση με 1 και θέτωντας την τιμή της customers_served ίση με μηδέν.

close:
Η συνάρτηση close του ταμείου κλείνει το ταμείο θέτωντας την τιμή του open_flag ίση με 0 . 

serve:
Η συνάρτηση serve του ταμείου εξυπηρετεί τους πελάτες θέτωντας την τιμή του serving_flag ίση με 1 .

free:
H συνάρτηση free ελευθερώνει το ταμείο κάνοντας την serving_flag ίση με 0 και αυξάνοντας την customers_served κατά ένα σε περίπτωση που η customers_served γίνει ίση με τον αριθμό L (ίση δηλαδή με τον αριθμό L που έχουμε δώσει απο την γραμμή εντολών και αντιπροσωπεύει το πλήθος των πελατών που μπορεί να δεχτεί το ταμείο χώρις να υπερλειτουργήσει) τότε καλείται η συνάρτηση close για να κλείσει το ταμείο και εκτυπώνεται το αντίστοιχο μύνημα.

is_open και is_close
Οι συναρτήσεις is_open και is_free επιστρέφουν την τιμή του open_flag και serving_flag αντίστοιχα και "δείχνουν" μαυτον τον τρ΄΄οπο αν ένα ταμείο είναι ανοιχτό ή όχι και αν εξυπηρετεί πελάτη ή όχι.

class bank:
Στο private κομμάτι της η κλάση περιέχει τις μεταβλητές int last_customer τον μετρητή δηλαδή που αυξάνει κάθε φορά που εισέρχεται ένας πελάτης , την curr_serving δηλαδή τον αριθμό προτεραιότητας του πελάτη που καλείται να εξυπηρετηθεί , την μεταβλητή counter που αποτελεί έναν μετρητή και θα χρειαστεί αργότερα στην συνάρτηση open_cashier η οποία αρχικοποιείται και με μηδέν , τρία αντικείμενα κλάσης cashier που αντιπροσωπεύουν τα πέντε ταμεία και τέλος την μεταβλητή serve_holder η οποία θα χρειαστεί αργότερα στην συνάρτηση serve της τράπεζας και αρχικοποιείται με μηδέν.
Όσον αφορα το public κομμάτι η μεταβλητή others_counter αποτελεί έναν μετρητή ο οποίος θα μετράει όσους πελάτες δεν κατάφεραν να μπουν στην τράπεζα και βρίσκεται στο public κομμάτι της συνάρτησης διότι χρησιμοποιείται και απο την main του αρχείου ask2main οπότε χρειάζεται πρόσβαση σαυτό.
Ακολουθεί η destructor της τράπεζας και η constructor κατα την οποία σύμφωνα με την εκφώνηση θα καλέσει την συνάρτηση open που παίρνει σαν όρισμα την διεύθυνση ενός αντικειμένου κλάσης στην περιπτωσή μας του cash1 για να το ανοίξει και ύστερα να θέσει ως 1 την μεταβλητή  last_customer ώστε να μπεί ο πρώτος πελάτης και να θέσει ως 1 την μεταβλητή curr_serving καθώς ο πελάτης νούμερο ένα θα πρέπει εξυπηρετηθεί αρχικά.

open:
H συνάρτηση open με όρισμα τη διεύθυνση ενός αντικειμένου  της κλάσης cashier αρχικά καλεί την συνάρτηση open του αντικειμένου της κλάσης cashier που διαθέτει ως όρισμα η συνάρτηση ,προκειμένου να ανοίξει το ταμείο και στην συνέχεια ανάλογα σε ποιο απο τα πέντε ταμεία αντιστοιχεί η διεύθυνση του ορίσματος  εκτυπώνεται το ανάλογο μύνημα για το ποιο ταμείο άνοιξε.

check_to_open:
Η συνάρτηση δέχεται σαν όρισμα την μεταβλητή Κ με την οποία θα πολλαπλασιάσουμε τον αριθμό των ανοιχτών ταμείων.
Σε περίπτωση που οι πελάτες που περιμένουν να εξυπηρετηθούν είναι περισσότεροι απο τα ταμεία που είναι ανοικτά επι την μεαβλητή Κ τότε ισχύει και επιστρέφει true αλλιώς θα επιστρέψει false.

waiting_customers:
Αφαιρεί απο όσους έχουν μπεί, όσους εξυπηρετούνται και προκύπτει ο αριθμός αυτών που περιμένουν να εξυπηρετηθούν.
Τον οποίο αριθμό και επιστρέφει.

open_cashiers:
Aρχικοποιεί τον μετρητή counter με μηδέν, στην συνέχεια ελέγχει πόσα ταμεία έιναι ανοιχτά ελέγχοντας σε καθένα ξεχωριστά αν η συνάρτηση is_open είναι ίση με 1, εφόσον η is_open επιστρέφει την τιμή του open_flag τότε αν επιστρέψει 1 τότε  θα είναι ανοικτό το ταμείο και θα αυξήσει κατά ένα την μεταβλητή counter αλλίως δεν θα είναι ανοιχτό και θα ελέγξει τα επόμενα ταμεία.
Όταν τελειώσει τον έλεγχο θα εκτυπώσει τον αριθμό των ταμείων.

enter:
Η συνάρτηση αυτή δέχεται όρισμα Κ το οποίο αποτελεί την μεταβλητή με την οποία πολλαπλασιάζουμε τον αριθμό των ανοιχτών ταμείων.
Αρχικά η συνάρτηση αυτή ελέγχει αν η check_to_open είναι false δηλαδή αν τα ταμεία που είναι ανοικτά επαρκούν σε σχέση με τους πελάτες που περιμένουν, αν είναι false τότε αυξάνει κατά ένα την μεταβλητή last_customer, καθώς υπάρχει χώρος για άλλον ένα πελάτη .
Στην περίπτωση που τα ταμεία που είναι ανοικτά δεν αρκούν για τους πελάτες που περιμένουν τότε θα ελέγξει για το πρώτο ταμείο αν είναι ανοιχτό δηλαδή αν η συνάρτηση is_open είναι 1 και αν η συνάρτηση is_open του δεύτερου ταμείου είναι ίση με μηδέν ,ώστε αν είναι να ανοίξει το δεύτερο ταμείο , να αυξήσει τον αριθμό προτεραιότητας και να επιστρέψει true εκεί που κλήθηκε  ,ουστιαστικά αυτο που επιτυγχάνεται είναι μαυτόν τον τρόπο να ανοίγεται το αμέσως επόμενο ταμείο απο αυτό που είναι ήδη ανοιχτό.
Ομοίως αν το ταμείο 2 είναι ανοιχτο και το ταμείο 3 είναι κλειστό τότε θα ανοίξει το 3, αν το 3 είναι ανοιχτό και το 4 είναι κλειστό τότε θα ανοίξει το 4 και τέλος αν το 4 είναι ανοιχτό και το 5 είναι κλειστό τότε θα ανοίξει το 5 ανοίγοντας τα ταμεία με την συνάρτηση open της κλάσης ταμείου επίσης θα αυξήσει και τον αριθμό προτεραιότητας και θα επιστρέψει true εκεί που κλήθηκε η συνάρτηση .
Στην περίπτωση που όλα τα ταμεία είναι ανοιχτά τότε δεν θα μπορέσει να μπει κάποιος άλλος πελάτης γιαυτό λοιπόν και εκτυπώνεται το κατάλληλο μύνημα και αυξάνεται κατά ένα ο μετρητής others_counter για τους πελάτες που δεβν έχουν καταφέρει να μπούν και τέλος επιστρέφεται εκεί που κλήθηκε η συνάρτηση.

check_to_close:
Aν ο αριθμός που επιστρέφει η συνάρτηση waiting_to_serve δηλαδη ο αριθμός που προκύπτει απο την αφαίρεση των last_customer -curr_serving έιναι μικρότερος ίσος απο τον αριθμό των ανοικτών ταμείων που επιστρέφεται απο την συνάρτηση open_cashiers μειων 1 και όλο αυτο επι της μεταβλητής Κ τότε αυτο σημαίνει ότι τα ταμεία είναι περισσότερα απο τους πελάτες που περιμένουν δηλαδή πλεονάζουν και επομένως η συνάρτηση θα επιστρέψει true , προκειμένου να στην συνέχεια να κλείσει κάποιο ταμείο , σε περίπτωση που δεν υπάρχει λεονασμός απο την μεριά των ταμείων τότε επιστρέφει false .

close:
Η συνάρτηση close δέχεται ως όρισμα την διεύθυνση ενός ταμείου και καλεί την close συνάρτηση του ταμείου ώστε να το κλείσει να ορίσει δηλαδή την μεταβλητή open_flag ίση με μηδέν στην συνέχεια ελέγχει με ποια διεύθυνση είναι ίδια απο τα πέντε ταμεία η διεύθυνση του ορίσματος και εκτυπώνει το αντίστοιχο μύνημα.

exit:
Η συνάρτηση exit παίρνει ως όρισμα την μεταβλητή Κ με την οποία πολλαπλασιάζεται ο αριθμός των ανοιχτών ταμείων.
Αρχικά αυξάνεται ο αριθμός της μεταβλητής curr_serving προκειμένου να να εξυπηρετηθεί αργότερα ο επόμενος πελάτης σε περίπτωση που η συνάρτηση check_to_close είναι αληθής δηλαδή τα ταμεία πλεονάζουν σε σχέση με τους πελάτες τότε  ελέγχει με την σειρά τα ταμεία προκειμένου να τα κλείσει κάποιο δηλαδή ελέγχει αρχικά αν το πρώτο είναι ανοιχτό τότε να κλείσει το πρώτο μέσω της συνάρτησης close και να επιστρέψει true, αν δεν είναι ανοιχτό το πρώτο τότε να ελεγξει το δεύτεροαν αν είναι ανοιχτό και αν είναι τότε να το κλείσει και να επιστρέψει true ομοίως για το τρίτο ,τέταρτο και πέμπτο ταμείο.

serve:
H συνάρτηση αυτή δέχεται δύο ορίσματα την μεταβλητή Κ απο την εκφώνηση και έναν αριθμό L o οποίος αντιστοιχεί στο πλήθος των πελατών που μπορεί να αντέξει το ταμείο χωρίς να υπερλειτουργήσει.
Αρχικά γίνεται έλεγχος αν όλα τα ταμεία είναι κλειστά , όπως δίνεται απο την εκφώνηση αν όλα τα ταμεία είναι κλειστά , τότε να ανοίξει το πρώτο ταμείο η serve μέσω της συνάρτησης open , να καλέσει την συνάρτηση serve του ταμείου1 προκειμένου το ταμείο να μπορεί να εξυπηρετήσει και να θέσει την μεταβλητή serve_holder ίση με 1 (η serve_holder είναι μια μεταβλητή η οποία μας δείχνει ποιο ταμείο εξυπηρέτησε έναν πελάτη και βοηθάει κυρίως για τις επόμενες εξυπηρετήσεις προκειμένου να είναι γνωστό το προηγούμενο ταμείο που εξυπηρέτησε έτσι ώστε στην επόμενη εξυπηρέτηση το ακριβώς επόμενο ανοικτο ταμείο να εξυπηρετήσει τον επόμενο πελάτη) στην συνέχεια εκτυπώνεται ο αριθμός του πελάτη που εξυπηρετείται, μέσω της curr_serving που διαθέτει αυτόν τον αριθμό και  ο αριθμός του ταμείου που εξυπηρετεί εκείνη την στιγμή τον πελάτη μέσω της serve_holder που κρατάει τον αριθμό αυτό τέλος ελευθερώνεται το ταμείο και πραγματοποιείται έξοδος του πελάτη και επιστροφή της συνάρτησης για να μην γίνει άλλος έλεγχος .
Αν η serve_holder είναι ίση με 0 δηλαδή κανένα ταμείο δεν έχει εξυπηρετήσει κάποιον πελάτη και ουσιαστικά πρόκειται να γίνει η πρώτη εξυπηρέτηση η serve_holder θα είναι ίση με μηδέν απο την αρχικοποίηση της.Οπότε όταν πρόκειται να γίνει η πρώτη εξυπηρέτηση επιλέγεται το πρώτο ταμείο να εξυπηρετήσει και η serve_holder δέχεται την τιμή 1 καθώς εξυπηρετεί το πρώτο ταμείο έπειτα εκτυπώνεται ο αριθμός που εχει εκείνη την στιγμή η curr_serving που δείχνει τον πελάτη με το αντίστοιχο νούμερο που εξυπηρετείται και τον αριθμό του ταμείου μέσω της serve_holder που τον περιέχει, οι επόμενες εντολές είναι η ελευθέρωση του ταμείου και η έξοδος του πελάτη και επιστροφή της συνάρτησης για να μην γίνει άλλος έλεγχος.
Στην συνέχεια έχουμε τις περιπτώσεις που δεν είναι η πρώτη φορά που γίνεται εξυπηρέτηση και δεν είναι όλα τα ταμεία κλειστά ακολουθούν δηλαδή οι περιπτώσεις όπου τουλάχιστον ένα ταμείο είναι ανοιχτό και έχει εξυπηρετήσει έναν πελάτη.
Οπότε η διαδικάσια ξεκινάει με την περίπτωση αν το serve_holder είναι ίσο με το 1 δηλαδή η προηγούμενη εξυπηρέτηση έγινε απο το ταμείο 1 τότε ελέγχει αν το ταμείο 2 έιναι ανοιχτό και ελεύθερο, αν είναι ανοιχτό και ελεύθερο το ταμείο 2 τότε θα θέσει το serve_holder ίσο με 2 για τις επόμενες εξυπηρετήσεις, εκτυπώνεται ο αριθμός που εχει εκείνη την στιγμή η curr_serving που δείχνει τον πελάτη με το αντίστοιχο νούμερο που εξυπηρετείται και τον αριθμό του ταμείου μέσω της serve_holder που τον περιέχει , μετά καλείται η συνάρτηση serve για το ταμείο 2 , ελευθερώνεται, γίνεται έξοδος του πελάτη και επιστροφή για νημ υπάρξει άλλος έλεγχος.
Παρόλαυτα υπάρχει περίπτωση το αμέσως επόμενο ταμείο να έιναι κλειστό  για παράδειγμα στην περίπτωση μας υπάρχει περίπτωση το πρώτο ταμείο να εξυπηρετήσει έναν πελάτη και για την επόμενη εξυπηρέτηση να χρειαστεί το δεύτερο ταμείο αλλά είναι κλειστό τότε λοιπόν έχω φροντίσει αν το αμέσως επόμενο είναι κλειστό να γίνει έλεγχος για το αμέσως επόμενο του επόμενου δηλαδή μετά θα γίνει έλεγχος αν το τρίτο ταμείο είναι ανοιχτό και ελεύθερο.
Αν το δεύτερο ταμείο είναι κλειστό και το τρίτο είναι ανοιχτο και ελεύθερο τότε την ίδια διαδικασία εξυπηρέτησης θα ακολουθήσει και το τρίτο ταμείο αν όμως και το τρίτο ταμείο είναι κλειστό τότε θα γίνει έλεγχος και για το τέταρτο ταμείο το οποίο αν έιναι ανοιχτό και ελεὐθερο θα γίνει κανονικά η εξυπηρέτηση αν δεν έιναι ούτε το τέταρτοταμείο ανοιχτό και ελεύθερο τότε θα γίνει έλεγχος και για το πέμπτο αν έιναι ,ομοίως θα εξυπηρετήσει αν όμως και το πέμπτο ταμείο είναι κλειστό τότε η τελευταία επιλογή για εξυπηρέτηση θα είναι το πάλι απο το ίδιο ταμείο που εξυπηρέτησε αμέσως πριν.
Ο σκοπός αυτης της υλοποίησης είναι κάθε φορά που στην main γίνεται μία επανάληψη και καλείται η serve για ένα αντικείμενο κλάσης bank τότε να γλινεται σίγουρα μία εξυπηρέτηση αν γίνεται απο το αμέσως επόμενο ταμείο αν όχι απο τα επόμενα ταμεία κυκλικά και αν πάλι δεν γίνεται στο τέλος να γίνεται η εξυπηρέτηση απο το ίδιο ταμείο που εξυπηρέτηση προηγουμένως.
Έστω για παράδειγμα ότι έχουν γίνει μερικές εξυπηρετήσης και το πρόγραμμα βρίσκεται σε μια κατάσταση όπου υπάρχουν δυο ανοιχτά ταμεία το πρώτο και το πέμπτο και επειδή πλεονάζουν τα ταμεία το πέμπτο ταμείο κλείνει και μένει μόνο το πρώτο οπότε γίνεται μια εξυπηρέτηση αμεσως μετά την οποία και αναλαμβάνει το πρώτο ταμείο και επιστρέφει true στην main στην συνέχεια γίνεται μία ακόμη επανάληψη απο την main και καλείται για ακόμη μια φορά η serve , άρα μέσα στην serve υπάρχει ένα μονο ανοιχτο ταμείο και ελεύθερο το πρώτο το οποίο μάλιστα έχει serve_holder=1 λόγω της προηγούμενης εξυπηρέτησης άρα η συνάρτηση θα μπεί στην περίπτωση που το serve_holder είναι ίσο με 1 θα γίνει έλεγχος για το δεύτερο ταμείο μήπως είναι ανοιχτό και ελεύθερο ,θα δει οτι δεν είναι ομοίως θα γίνει έλεγχος για το τρίτο,τέταρτο,πέμπτο ωστόσο όλα είναι κλειστά άρα εν τέλει θα εξυπηρετήσει τον πελάτη πάλι το πρώτο ταμείο όπως εξυπηρέτησε και τον προηγούμεν.Υλοποίησα την serve μαυτον τον τρόπο δίοτι σε τέτοιες πειπτώσεις πάνοτε κάοιος πελάτες που είχε μπει μέσα και περίμενε δεν εξυπηρετούνταν χωρίς να υπάρχει η δυνατότητα εξυπηρέτησης απο το ίδιο ταμείο που εξυπηρέτησε και πριν και οι επαναλήψεις της main τελείωναν οπότε καποιοι δε νεξυπηρετούνταν ποτέ.
Μια ακόμη διευκρίνηση είναι ότι σε κάθε if(cash#.is_open==1) ακριβώς απο κάτω η serve_holder παίρνει την τιμή του ταμείου αυτού για την εκτύπωση της serve holder πιο κάτω στο σημείο cout<<"by"; αλλά για γενικότερα να δεχθεί την τιμή του ταμείου μόνο αν είναι ανοιχτό το ταμείο.
Ομοίως για τα επόμενα ταμεία η serve_holder είναι ίση με το 2 τότε θα ελέγξει το τρίτο ταμείο και αν δεν είναι ανοιχτό θα συνεχίσει να ελέγχει μέχρι το δευτερο μέχρι να βρεί κάποιο που να είναι ανοιχτό συμπεριλαμβανομένου και του ίδιου.    
Η διαδικασία αυτή επαναλαμβάνεται απο την γραμμή 183 εώς την γραμμή 478.

main:
Στην main ορίζονται οι μεταβλητές Κ ηοποία χρησιμοποείται για τις αντίστοιχες πράξεις στους αντίστοιχους τύπους , Μ για τις επαναλήψεις που θα γίνουν για την εξυπηρέτηση των πελατών δηλαδή τις διαδικασίες enter και serve , Ν για τους πελάτες που θα εξυπηρετηθούν  και L για το πλήθος των πελατών που μπορεί να αντέξει ένα ταμείο .
Μέσω της atoi ορίσματα απο την γραμμή εντολων θα γίνουν αριθμοί .
Δημιουργείται αρχικά μια τράπεζα ένα αντικείμενο δηλαδή με όνομα trapeza τύπου bank απο κάτω ακριβώς ορίζεται μια μεταβλητή n η οποία θα δέχεται τον αριθμό των πελατών που έχουν μπεί και περιμένουν να εξυπηρετηθούν τον οποίο αριθμό θα επιστρέψει η συνάρτηση waiting_customers.
Για να γίνουν οι κατάλληλες διαδικασίες εισόδου και εξυπηρέτησης των πελατών αρχικά φτιάχτηκε ένας βρόγχος ο οποίος θα κάνει Μ επαναλήψεις όπως μας ζητείται και απο την εκφώνηση και μέσα σαυτόν βρίσκεται άλλος ένας βρόγχος ο οποίος φτάνει τις Ν επαναλήψεις ουσιαστικά αποτελεί κάθε πελάτη δηλαδή κάθε επανάληψη στον βρόγχο αυτόν είναι ένας πελάτης ο οποίος μέσω της συνάρτησης enter του αντικειμένου trapeza θα μπεί μέσα στην τράπεζα και κάθε φορά θα ανανεώνεται ο αριθμός των ανθρώπων που έχουν μπεί και περιμένου ννα εξυπηρετηθούν διότι μέχρι εκείνο το σημείο η μεταβλητή curr_serving δεν αλλάζει διότι δεν εξυπηρετείται κάποιος πελάτης άλλα η μεταβλητή last_customer που αντιπροσωπεύει τους πελάτες που θα πρέπει να εξυπηρετηθούν αυξάνεται συνεχώς γιαυτό λοιπόν η εντολή n=waiting_customers βρίσκεται μέσα στον βρόγχο.
Εφόσον γίνεται η είσοδος μερικών πελατών ακολουθεί η εξυπηρέτηση τους δηλαδή ακολουθεί ένας βρόγχος απο το μηδεν εώς τον αριθμό των πελατών που περιμένουν ο οποίος βρίσκεται στο n που βρέθηκε από πάνω.
Τέλος η main τελειώνει με εναν βρόγχο μέσα στον οποίο θα γίνονται serve όλοι οι πελάτες οι οποίοι δεν κατάφεραν να μπούν και οι επαναλήψεις ξεκινούν απο το μηδέν εώς τον αριθμό που θα έχει η μεταβλήτη others_counter και δείχνει τον αριθμό αυτόν που δεν κατάφεραν να μπούν και ακολουθεί η κλήση της συνάρτησης serve για να εξυπηρετηθούν και αυτοί και τέλος η return true της main (γιαυτό και η μεταβλητή αυτή βρίσκεται στο public κομμάτι της τράπεζας).


